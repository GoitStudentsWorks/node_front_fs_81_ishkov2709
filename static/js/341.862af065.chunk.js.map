{"version":3,"file":"static/js/341.862af065.chunk.js","mappings":"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","sources":["schemas/signupSchema.js","pages/SignUpPage/SignUp.jsx","pages/SignUpPage/SignUpPage.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const signupSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Invalid email')\n    .required('Email is required'),\n  password: Yup.string()\n    .matches(\n      /^(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,64}$/,\n      'Password should have letters, numbers, special characters'\n    )\n    .min(8, 'Too short password')\n    .max(64, 'Too long password')\n    .required('Password is required'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .min(8, 'Too short password')\n    .max(64, 'Too long password')\n    .required('Repeat password is required'),\n});\n","import Container from 'components/common/Container';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport sprite from '../../img/sprites.svg';\nimport {\n  Label,\n  Title,\n  LinkToPage,\n  Box,\n  StyledForm,\n  StyledInput,\n  SigninButton,\n  ErrorM,\n  StyledPasswordInput,\n  ResendBtn,\n} from '../SigninPage/Auth.styled';\nimport { Wrapper } from '../HomePage/HomePage.styled';\nimport { signupSchema } from 'schemas/signupSchema';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { resetError, resetSuccessful } from 'store/auth/authSlice';\nimport { useAuth } from 'hooks/useAuth';\n\nconst initialValues = {\n  email: '',\n  password: '',\n  repeatPassword: '',\n};\n\nconst Signup = ({ signup, resend }) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [repeatPasswordVisible, setRepeatPasswordVisible] = useState(false);\n  const navigate = useNavigate();\n  const { error, successful } = useAuth();\n  const dispatch = useDispatch();\n\n  const storeEmailInLocalStorage = email => {\n    localStorage.setItem('registrationEmail', email);\n  };\n  const getStoredEmailFromLocalStorage = () => {\n    return localStorage.getItem('registrationEmail') || '';\n  };\n\n  const storedEmail = getStoredEmailFromLocalStorage();\n  const [email, setEmail] = useState(storedEmail);\n\n  const handleSuccessfulAuthentication = useCallback(() => {\n    toast.info('Success! Please, check your mail for confirmation.');\n    setTimeout(() => {\n      navigate('/signin');\n    }, 6000);\n    dispatch(resetSuccessful());\n  }, [dispatch, navigate]);\n\n  useEffect(() => {\n    successful && !error && handleSuccessfulAuthentication();\n    if (error) {\n      toast.error(error);\n      dispatch(resetError());\n    }\n  }, [dispatch, successful, error, handleSuccessfulAuthentication]);\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    storeEmailInLocalStorage(values.email);\n    setEmail(values.email);\n    await signup({ email: values.email, password: values.password });\n\n    setSubmitting(false);\n  };\n\n  const handleResendConfirmationEmail = async () => {\n    if (email) {\n      await resend({ email });\n      handleSuccessfulAuthentication();\n    } else {\n      toast.error('You have not entered any email yet.');\n    }\n  };\n\n  const togglePasswordVisibility = field => {\n    if (field === 'password') {\n      setPasswordVisible(!passwordVisible);\n    } else if (field === 'repeatPassword') {\n      setRepeatPasswordVisible(!repeatPasswordVisible);\n    }\n  };\n  return (\n    <Wrapper>\n      <Container>\n        <Box>\n          <div>\n            <Formik\n              initialValues={{ email, ...initialValues }}\n              validationSchema={signupSchema}\n              onSubmit={handleSubmit}\n            >\n              {({ isSubmitting, errors, touched }) => (\n                <StyledForm>\n                  <Title>Sign Up</Title>\n                  <div>\n                    <Label>Enter your email</Label>\n                    <Field\n                      as={StyledInput}\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      hasError={touched.email && errors.email}\n                      required\n                    />\n                    <ErrorMessage name=\"email\" component={ErrorM} />\n                  </div>\n                  <div>\n                    <Label>Enter your password</Label>\n                    <StyledPasswordInput>\n                      <Field\n                        as={StyledInput}\n                        type={passwordVisible ? 'text' : 'password'}\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        hasError={touched.password && errors.password}\n                        required\n                      />\n                      <span\n                        onClick={() => togglePasswordVisibility('password')}\n                      >\n                        {passwordVisible ? (\n                          <svg className=\"eye\">\n                            <use href={sprite + '#eye'} />\n                          </svg>\n                        ) : (\n                          <svg className=\"eye\">\n                            <use href={sprite + '#hidden'} />\n                          </svg>\n                        )}\n                      </span>\n                    </StyledPasswordInput>\n                    <ErrorMessage name=\"password\" component={ErrorM} />\n                  </div>\n                  <div>\n                    <Label>Repeat password</Label>\n                    <StyledPasswordInput>\n                      <Field\n                        as={StyledInput}\n                        type={repeatPasswordVisible ? 'text' : 'password'}\n                        name=\"repeatPassword\"\n                        placeholder=\"Repeat password\"\n                        required\n                        hasError={\n                          touched.repeatPassword && errors.repeatPassword\n                        }\n                      />\n                      <span\n                        onClick={() =>\n                          togglePasswordVisibility('repeatPassword')\n                        }\n                      >\n                        {repeatPasswordVisible ? (\n                          <svg className=\"eye\">\n                            <use href={sprite + '#eye'} />\n                          </svg>\n                        ) : (\n                          <svg className=\"eye\">\n                            <use href={sprite + '#hidden'} />\n                          </svg>\n                        )}\n                      </span>\n                    </StyledPasswordInput>\n                    <ErrorMessage name=\"repeatPassword\" component={ErrorM} />\n                  </div>\n                  <SigninButton\n                    type=\"submit\"\n                    width={336}\n                    disabled={isSubmitting}\n                  >\n                    Sign Up\n                  </SigninButton>\n                </StyledForm>\n              )}\n            </Formik>\n\n            <LinkToPage to=\"/signin\">Sign in</LinkToPage>\n            <ResendBtn onClick={handleResendConfirmationEmail}>\n              Resend Confirmation Email\n            </ResendBtn>\n            <ToastContainer />\n          </div>\n        </Box>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default Signup;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { resendEmail, signUpUser } from '../../store/auth/thunk';\n\nimport SignUp from './SignUp';\n\nconst SignupPage = () => {\n  const dispatch = useDispatch();\n\n  const signup = body => {\n    dispatch(signUpUser(body));\n  };\n\n  const resend = body => {\n    dispatch(resendEmail(body));\n  };\n\n  return (\n    <>\n      <SignUp signup={signup} resend={resend} />\n    </>\n  );\n};\n\nexport default SignupPage;\n"],"names":["signupSchema","Yup","shape","email","matches","required","password","min","max","repeatPassword","oneOf","initialValues","_ref","signup","resend","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","repeatPasswordVisible","setRepeatPasswordVisible","navigate","useNavigate","_useAuth","useAuth","error","successful","dispatch","useDispatch","storeEmailInLocalStorage","localStorage","setItem","storedEmail","getItem","_useState5","_useState6","setEmail","handleSuccessfulAuthentication","useCallback","toast","setTimeout","resetSuccessful","useEffect","resetError","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref2","setSubmitting","_context","prev","next","stop","_x","_x2","apply","arguments","handleResendConfirmationEmail","_ref4","_callee2","_context2","togglePasswordVisibility","field","_jsx","Wrapper","children","Container","Box","_jsxs","Formik","_objectSpread","validationSchema","onSubmit","_ref5","isSubmitting","errors","touched","StyledForm","Title","Label","Field","as","StyledInput","type","name","placeholder","hasError","ErrorMessage","component","ErrorM","StyledPasswordInput","onClick","className","href","sprite","SigninButton","width","disabled","LinkToPage","to","ResendBtn","ToastContainer","_Fragment","SignUp","body","signUpUser","resendEmail"],"sourceRoot":""}